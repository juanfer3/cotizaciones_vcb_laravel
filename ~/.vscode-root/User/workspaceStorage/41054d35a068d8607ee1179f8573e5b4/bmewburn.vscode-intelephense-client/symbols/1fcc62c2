[["file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/ramsey/uuid/src/Uuid.php",{"_uri":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/ramsey/uuid/src/Uuid.php","_root":{"kind":4096,"name":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/ramsey/uuid/src/Uuid.php","location":{"uriHash":533488322,"range":{"start":{"line":0,"character":0},"end":{"line":740,"character":0}}},"children":[{"kind":512,"name":"Ramsey\\Uuid","location":{"uriHash":533488322,"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":22}}}},{"kind":1,"name":"NumberConverterInterface","location":{"uriHash":533488322,"range":{"start":{"line":16,"character":4},"end":{"line":16,"character":50}}},"modifiers":4096,"associated":[{"kind":1,"name":"Ramsey\\Uuid\\Converter\\NumberConverterInterface"}]},{"kind":1,"name":"CodecInterface","location":{"uriHash":533488322,"range":{"start":{"line":17,"character":4},"end":{"line":17,"character":36}}},"modifiers":4096,"associated":[{"kind":1,"name":"Ramsey\\Uuid\\Codec\\CodecInterface"}]},{"kind":1,"name":"UnsupportedOperationException","location":{"uriHash":533488322,"range":{"start":{"line":18,"character":4},"end":{"line":18,"character":55}}},"modifiers":4096,"associated":[{"kind":1,"name":"Ramsey\\Uuid\\Exception\\UnsupportedOperationException"}]},{"kind":1,"name":"Ramsey\\Uuid\\Uuid","location":{"uriHash":533488322,"range":{"start":{"line":36,"character":0},"end":{"line":739,"character":1}}},"children":[{"kind":1024,"name":"NAMESPACE_DNS","location":{"uriHash":533488322,"range":{"start":{"line":42,"character":10},"end":{"line":42,"character":64}}},"modifiers":33,"value":"'6ba7b810-9dad-11d1-80b4-00c04fd430c8'","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"NAMESPACE_URL","location":{"uriHash":533488322,"range":{"start":{"line":48,"character":10},"end":{"line":48,"character":64}}},"modifiers":33,"value":"'6ba7b811-9dad-11d1-80b4-00c04fd430c8'","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"NAMESPACE_OID","location":{"uriHash":533488322,"range":{"start":{"line":54,"character":10},"end":{"line":54,"character":64}}},"modifiers":33,"value":"'6ba7b812-9dad-11d1-80b4-00c04fd430c8'","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"NAMESPACE_X500","location":{"uriHash":533488322,"range":{"start":{"line":60,"character":10},"end":{"line":60,"character":65}}},"modifiers":33,"value":"'6ba7b814-9dad-11d1-80b4-00c04fd430c8'","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"NIL","location":{"uriHash":533488322,"range":{"start":{"line":66,"character":10},"end":{"line":66,"character":54}}},"modifiers":33,"value":"'00000000-0000-0000-0000-000000000000'","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"RESERVED_NCS","location":{"uriHash":533488322,"range":{"start":{"line":72,"character":10},"end":{"line":72,"character":26}}},"modifiers":33,"value":"0","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"RFC_4122","location":{"uriHash":533488322,"range":{"start":{"line":78,"character":10},"end":{"line":78,"character":22}}},"modifiers":33,"value":"2","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"RESERVED_MICROSOFT","location":{"uriHash":533488322,"range":{"start":{"line":84,"character":10},"end":{"line":84,"character":32}}},"modifiers":33,"value":"6","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"RESERVED_FUTURE","location":{"uriHash":533488322,"range":{"start":{"line":90,"character":10},"end":{"line":90,"character":29}}},"modifiers":33,"value":"7","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"VALID_PATTERN","location":{"uriHash":533488322,"range":{"start":{"line":95,"character":10},"end":{"line":95,"character":105}}},"modifiers":33,"value":"'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$'","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"UUID_TYPE_TIME","location":{"uriHash":533488322,"range":{"start":{"line":100,"character":10},"end":{"line":100,"character":28}}},"modifiers":33,"value":"1","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"UUID_TYPE_IDENTIFIER","location":{"uriHash":533488322,"range":{"start":{"line":105,"character":10},"end":{"line":105,"character":34}}},"modifiers":33,"value":"2","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"UUID_TYPE_HASH_MD5","location":{"uriHash":533488322,"range":{"start":{"line":110,"character":10},"end":{"line":110,"character":32}}},"modifiers":33,"value":"3","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"UUID_TYPE_RANDOM","location":{"uriHash":533488322,"range":{"start":{"line":115,"character":10},"end":{"line":115,"character":30}}},"modifiers":33,"value":"4","scope":"Ramsey\\Uuid\\Uuid"},{"kind":1024,"name":"UUID_TYPE_HASH_SHA1","location":{"uriHash":533488322,"range":{"start":{"line":120,"character":10},"end":{"line":120,"character":33}}},"modifiers":33,"value":"5","scope":"Ramsey\\Uuid\\Uuid"},{"kind":16,"name":"$factory","location":{"uriHash":533488322,"range":{"start":{"line":126,"character":19},"end":{"line":126,"character":34}}},"doc":{"description":"","type":"Ramsey\\Uuid\\UuidFactoryInterface"},"value":"","modifiers":36,"scope":"Ramsey\\Uuid\\Uuid"},{"kind":16,"name":"$codec","location":{"uriHash":533488322,"range":{"start":{"line":132,"character":14},"end":{"line":132,"character":20}}},"doc":{"description":"","type":"Ramsey\\Uuid\\Codec\\CodecInterface"},"modifiers":2,"scope":"Ramsey\\Uuid\\Uuid"},{"kind":16,"name":"$fields","location":{"uriHash":533488322,"range":{"start":{"line":142,"character":14},"end":{"line":149,"character":5}}},"doc":{"description":"","type":"array"},"value":"","modifiers":2,"scope":"Ramsey\\Uuid\\Uuid"},{"kind":16,"name":"$converter","location":{"uriHash":533488322,"range":{"start":{"line":155,"character":14},"end":{"line":155,"character":24}}},"doc":{"description":"","type":"Ramsey\\Uuid\\Converter\\NumberConverterInterface"},"modifiers":2,"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"__construct","location":{"uriHash":533488322,"range":{"start":{"line":180,"character":4},"end":{"line":188,"character":5}}},"doc":{"description":"Creates a universally unique identifier (UUID) from an array of fields.\n\nUnless you're making advanced use of this library to generate identifiers\nthat deviate from RFC 4122, you probably do not want to instantiate a\nUUID directly. Use the static methods, instead:\n\n```\nuse Ramsey\\Uuid\\Uuid;\n\n$timeBasedUuid     = Uuid::uuid1();\n$namespaceMd5Uuid  = Uuid::uuid3(Uuid::NAMESPACE_URL, 'http://php.net/');\n$randomUuid        = Uuid::uuid4();\n$namespaceSha1Uuid = Uuid::uuid5(Uuid::NAMESPACE_URL, 'http://php.net/');\n```","type":""},"modifiers":1,"type":"","children":[{"kind":128,"name":"$fields","location":{"uriHash":533488322,"range":{"start":{"line":181,"character":8},"end":{"line":181,"character":21}}},"type":"array","doc":{"description":"An array of fields from which to construct a UUID;\nsee {@see \\Ramsey\\Uuid\\UuidInterface::getFieldsHex()} for array structure.","type":"array"},"scope":"__construct"},{"kind":128,"name":"$converter","location":{"uriHash":533488322,"range":{"start":{"line":182,"character":8},"end":{"line":182,"character":43}}},"type":"Ramsey\\Uuid\\Converter\\NumberConverterInterface","doc":{"description":"The number converter to use\nfor converting hex values to/from integers.","type":"Ramsey\\Uuid\\Converter\\NumberConverterInterface"},"scope":"__construct"},{"kind":128,"name":"$codec","location":{"uriHash":533488322,"range":{"start":{"line":183,"character":8},"end":{"line":183,"character":29}}},"type":"Ramsey\\Uuid\\Codec\\CodecInterface","doc":{"description":"The codec to use when encoding or decoding\nUUID strings.","type":"Ramsey\\Uuid\\Codec\\CodecInterface"},"scope":"__construct"}],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"__toString","location":{"uriHash":533488322,"range":{"start":{"line":197,"character":4},"end":{"line":200,"character":5}}},"doc":{"description":"Converts this UUID object to a string when the object is used in any\nstring context.","type":"string"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"jsonSerialize","location":{"uriHash":533488322,"range":{"start":{"line":209,"character":4},"end":{"line":212,"character":5}}},"doc":{"description":"Converts this UUID object to a string when the object is serialized\nwith `json_encode()`","type":"string"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"serialize","location":{"uriHash":533488322,"range":{"start":{"line":221,"character":4},"end":{"line":224,"character":5}}},"doc":{"description":"Converts this UUID object to a string when the object is serialized\nwith `serialize()`","type":"string"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"unserialize","location":{"uriHash":533488322,"range":{"start":{"line":233,"character":4},"end":{"line":239,"character":5}}},"doc":{"description":"Re-constructs the object from its serialized form.","type":""},"modifiers":1,"type":"","children":[{"kind":128,"name":"$serialized","location":{"uriHash":533488322,"range":{"start":{"line":233,"character":32},"end":{"line":233,"character":43}}},"doc":{"description":"","type":"string"},"scope":"unserialize"}],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"compareTo","location":{"uriHash":533488322,"range":{"start":{"line":241,"character":4},"end":{"line":256,"character":5}}},"modifiers":1,"type":"","children":[{"kind":128,"name":"$other","location":{"uriHash":533488322,"range":{"start":{"line":241,"character":30},"end":{"line":241,"character":50}}},"type":"Ramsey\\Uuid\\UuidInterface","scope":"compareTo"}],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"equals","location":{"uriHash":533488322,"range":{"start":{"line":258,"character":4},"end":{"line":265,"character":5}}},"modifiers":1,"type":"","children":[{"kind":128,"name":"$other","location":{"uriHash":533488322,"range":{"start":{"line":258,"character":27},"end":{"line":258,"character":33}}},"scope":"equals"}],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getBytes","location":{"uriHash":533488322,"range":{"start":{"line":267,"character":4},"end":{"line":270,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getClockSeqHiAndReserved","location":{"uriHash":533488322,"range":{"start":{"line":278,"character":4},"end":{"line":281,"character":5}}},"doc":{"description":"Returns the high field of the clock sequence multiplexed with the variant\n(bits 65-72 of the UUID).","type":"int"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getClockSeqHiAndReservedHex","location":{"uriHash":533488322,"range":{"start":{"line":283,"character":4},"end":{"line":286,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getClockSeqLow","location":{"uriHash":533488322,"range":{"start":{"line":293,"character":4},"end":{"line":296,"character":5}}},"doc":{"description":"Returns the low field of the clock sequence (bits 73-80 of the UUID).","type":"int"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getClockSeqLowHex","location":{"uriHash":533488322,"range":{"start":{"line":298,"character":4},"end":{"line":301,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getClockSequence","location":{"uriHash":533488322,"range":{"start":{"line":319,"character":4},"end":{"line":323,"character":5}}},"doc":{"description":"Returns the clock sequence value associated with this UUID.\n\nFor UUID version 1, the clock sequence is used to help avoid\nduplicates that could arise when the clock is set backwards in time\nor if the node ID changes.\n\nFor UUID version 3 or 5, the clock sequence is a 14-bit value\nconstructed from a name as described in RFC 4122, Section 4.3.\n\nFor UUID version 4, clock sequence is a randomly or pseudo-randomly\ngenerated 14-bit value as described in RFC 4122, Section 4.4.","type":"int"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getClockSequenceHex","location":{"uriHash":533488322,"range":{"start":{"line":325,"character":4},"end":{"line":328,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getNumberConverter","location":{"uriHash":533488322,"range":{"start":{"line":330,"character":4},"end":{"line":333,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getDateTime","location":{"uriHash":533488322,"range":{"start":{"line":338,"character":4},"end":{"line":348,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getFields","location":{"uriHash":533488322,"range":{"start":{"line":368,"character":4},"end":{"line":378,"character":5}}},"doc":{"description":"Returns an array of the fields of this UUID, with keys named according\nto the RFC 4122 names for the fields.\n\n* **time_low**: The low field of the timestamp, an unsigned 32-bit integer\n* **time_mid**: The middle field of the timestamp, an unsigned 16-bit integer\n* **time_hi_and_version**: The high field of the timestamp multiplexed with\nthe version number, an unsigned 16-bit integer\n* **clock_seq_hi_and_reserved**: The high field of the clock sequence\nmultiplexed with the variant, an unsigned 8-bit integer\n* **clock_seq_low**: The low field of the clock sequence, an unsigned\n8-bit integer\n* **node**: The spatially unique node identifier, an unsigned 48-bit\ninteger","type":"array"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getFieldsHex","location":{"uriHash":533488322,"range":{"start":{"line":380,"character":4},"end":{"line":383,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getHex","location":{"uriHash":533488322,"range":{"start":{"line":385,"character":4},"end":{"line":388,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getInteger","location":{"uriHash":533488322,"range":{"start":{"line":393,"character":4},"end":{"line":396,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getLeastSignificantBits","location":{"uriHash":533488322,"range":{"start":{"line":404,"character":4},"end":{"line":407,"character":5}}},"doc":{"description":"Returns the least significant 64 bits of this UUID's 128 bit value.","type":"mixed"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getLeastSignificantBitsHex","location":{"uriHash":533488322,"range":{"start":{"line":409,"character":4},"end":{"line":417,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getMostSignificantBits","location":{"uriHash":533488322,"range":{"start":{"line":425,"character":4},"end":{"line":428,"character":5}}},"doc":{"description":"Returns the most significant 64 bits of this UUID's 128 bit value.","type":"mixed"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getMostSignificantBitsHex","location":{"uriHash":533488322,"range":{"start":{"line":430,"character":4},"end":{"line":438,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getNode","location":{"uriHash":533488322,"range":{"start":{"line":464,"character":4},"end":{"line":467,"character":5}}},"doc":{"description":"Returns the node value associated with this UUID\n\nFor UUID version 1, the node field consists of an IEEE 802 MAC\naddress, usually the host address. For systems with multiple IEEE\n802 addresses, any available one can be used. The lowest addressed\noctet (octet number 10) contains the global/local bit and the\nunicast/multicast bit, and is the first octet of the address\ntransmitted on an 802.3 LAN.\n\nFor systems with no IEEE address, a randomly or pseudo-randomly\ngenerated value may be used; see RFC 4122, Section 4.5. The\nmulticast bit must be set in such addresses, in order that they\nwill never conflict with addresses obtained from network cards.\n\nFor UUID version 3 or 5, the node field is a 48-bit value constructed\nfrom a name as described in RFC 4122, Section 4.3.\n\nFor UUID version 4, the node field is a randomly or pseudo-randomly\ngenerated 48-bit value as described in RFC 4122, Section 4.4.","type":"int"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getNodeHex","location":{"uriHash":533488322,"range":{"start":{"line":469,"character":4},"end":{"line":472,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getTimeHiAndVersion","location":{"uriHash":533488322,"range":{"start":{"line":480,"character":4},"end":{"line":483,"character":5}}},"doc":{"description":"Returns the high field of the timestamp multiplexed with the version\nnumber (bits 49-64 of the UUID).","type":"int"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getTimeHiAndVersionHex","location":{"uriHash":533488322,"range":{"start":{"line":485,"character":4},"end":{"line":488,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getTimeLow","location":{"uriHash":533488322,"range":{"start":{"line":495,"character":4},"end":{"line":498,"character":5}}},"doc":{"description":"Returns the low field of the timestamp (the first 32 bits of the UUID).","type":"int"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getTimeLowHex","location":{"uriHash":533488322,"range":{"start":{"line":500,"character":4},"end":{"line":503,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getTimeMid","location":{"uriHash":533488322,"range":{"start":{"line":510,"character":4},"end":{"line":513,"character":5}}},"doc":{"description":"Returns the middle field of the timestamp (bits 33-48 of the UUID).","type":"int"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getTimeMidHex","location":{"uriHash":533488322,"range":{"start":{"line":515,"character":4},"end":{"line":518,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getTimestamp","location":{"uriHash":533488322,"range":{"start":{"line":536,"character":4},"end":{"line":543,"character":5}}},"doc":{"description":"Returns the timestamp value associated with this UUID.\n\nThe 60 bit timestamp value is constructed from the time_low,\ntime_mid, and time_hi fields of this UUID. The resulting\ntimestamp is measured in 100-nanosecond units since midnight,\nOctober 15, 1582 UTC.\n\nThe timestamp value is only meaningful in a time-based UUID, which\nhas version type 1. If this UUID is not a time-based UUID then\nthis method throws UnsupportedOperationException.","type":"int"},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getTimestampHex","location":{"uriHash":533488322,"range":{"start":{"line":548,"character":4},"end":{"line":560,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getUrn","location":{"uriHash":533488322,"range":{"start":{"line":562,"character":4},"end":{"line":565,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getVariant","location":{"uriHash":533488322,"range":{"start":{"line":567,"character":4},"end":{"line":581,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getVersion","location":{"uriHash":533488322,"range":{"start":{"line":583,"character":4},"end":{"line":590,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"toString","location":{"uriHash":533488322,"range":{"start":{"line":592,"character":4},"end":{"line":595,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"getFactory","location":{"uriHash":533488322,"range":{"start":{"line":602,"character":4},"end":{"line":609,"character":5}}},"doc":{"description":"Returns the currently set factory used to create UUIDs.","type":"Ramsey\\Uuid\\UuidFactoryInterface"},"modifiers":33,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"setFactory","location":{"uriHash":533488322,"range":{"start":{"line":616,"character":4},"end":{"line":619,"character":5}}},"doc":{"description":"Sets the factory used to create UUIDs.","type":""},"modifiers":33,"type":"","children":[{"kind":128,"name":"$factory","location":{"uriHash":533488322,"range":{"start":{"line":616,"character":38},"end":{"line":616,"character":67}}},"type":"Ramsey\\Uuid\\UuidFactoryInterface","doc":{"description":"","type":"Ramsey\\Uuid\\UuidFactoryInterface"},"scope":"setFactory"}],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"fromBytes","location":{"uriHash":533488322,"range":{"start":{"line":629,"character":4},"end":{"line":632,"character":5}}},"doc":{"description":"Creates a UUID from a byte string.","type":"Ramsey\\Uuid\\UuidInterface"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$bytes","location":{"uriHash":533488322,"range":{"start":{"line":629,"character":37},"end":{"line":629,"character":43}}},"doc":{"description":"","type":"string"},"scope":"fromBytes"}],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"fromString","location":{"uriHash":533488322,"range":{"start":{"line":641,"character":4},"end":{"line":644,"character":5}}},"doc":{"description":"Creates a UUID from the string standard representation.","type":"Ramsey\\Uuid\\UuidInterface"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$name","location":{"uriHash":533488322,"range":{"start":{"line":641,"character":38},"end":{"line":641,"character":43}}},"doc":{"description":"A string that specifies a UUID","type":"string"},"scope":"fromString"}],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"fromInteger","location":{"uriHash":533488322,"range":{"start":{"line":654,"character":4},"end":{"line":657,"character":5}}},"doc":{"description":"Creates a UUID from a 128-bit integer string.","type":"Ramsey\\Uuid\\UuidInterface"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$integer","location":{"uriHash":533488322,"range":{"start":{"line":654,"character":39},"end":{"line":654,"character":47}}},"doc":{"description":"String representation of 128-bit integer","type":"string"},"scope":"fromInteger"}],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"isValid","location":{"uriHash":533488322,"range":{"start":{"line":665,"character":4},"end":{"line":678,"character":5}}},"doc":{"description":"Check if a string is a valid UUID.","type":"boolean"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$uuid","location":{"uriHash":533488322,"range":{"start":{"line":665,"character":35},"end":{"line":665,"character":40}}},"doc":{"description":"The string UUID to test","type":"string"},"scope":"isValid"}],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"uuid1","location":{"uriHash":533488322,"range":{"start":{"line":694,"character":4},"end":{"line":697,"character":5}}},"doc":{"description":"Generate a version 1 UUID from a host ID, sequence number, and the current time.","type":"Ramsey\\Uuid\\UuidInterface"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$node","location":{"uriHash":533488322,"range":{"start":{"line":694,"character":33},"end":{"line":694,"character":45}}},"doc":{"description":"A 48-bit number representing the hardware address\nThis number may be represented as an integer or a hexadecimal string.","type":"int|string"},"value":"null","scope":"uuid1"},{"kind":128,"name":"$clockSeq","location":{"uriHash":533488322,"range":{"start":{"line":694,"character":47},"end":{"line":694,"character":63}}},"doc":{"description":"A 14-bit number used to help avoid duplicates that\ncould arise when the clock is set backwards in time or if the node ID\nchanges.","type":"int"},"value":"null","scope":"uuid1"}],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"uuid3","location":{"uriHash":533488322,"range":{"start":{"line":708,"character":4},"end":{"line":711,"character":5}}},"doc":{"description":"Generate a version 3 UUID based on the MD5 hash of a namespace identifier\n(which is a UUID) and a name (which is a string).","type":"Ramsey\\Uuid\\UuidInterface"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$ns","location":{"uriHash":533488322,"range":{"start":{"line":708,"character":33},"end":{"line":708,"character":36}}},"doc":{"description":"The UUID namespace in which to create the named UUID","type":"string"},"scope":"uuid3"},{"kind":128,"name":"$name","location":{"uriHash":533488322,"range":{"start":{"line":708,"character":38},"end":{"line":708,"character":43}}},"doc":{"description":"The name to create a UUID for","type":"string"},"scope":"uuid3"}],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"uuid4","location":{"uriHash":533488322,"range":{"start":{"line":721,"character":4},"end":{"line":724,"character":5}}},"doc":{"description":"Generate a version 4 (random) UUID.","type":"Ramsey\\Uuid\\UuidInterface"},"modifiers":33,"type":"","children":[],"scope":"Ramsey\\Uuid\\Uuid"},{"kind":32,"name":"uuid5","location":{"uriHash":533488322,"range":{"start":{"line":735,"character":4},"end":{"line":738,"character":5}}},"doc":{"description":"Generate a version 5 UUID based on the SHA-1 hash of a namespace\nidentifier (which is a UUID) and a name (which is a string).","type":"Ramsey\\Uuid\\UuidInterface"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$ns","location":{"uriHash":533488322,"range":{"start":{"line":735,"character":33},"end":{"line":735,"character":36}}},"doc":{"description":"The UUID namespace in which to create the named UUID","type":"string"},"scope":"uuid5"},{"kind":128,"name":"$name","location":{"uriHash":533488322,"range":{"start":{"line":735,"character":38},"end":{"line":735,"character":43}}},"doc":{"description":"The name to create a UUID for","type":"string"},"scope":"uuid5"}],"scope":"Ramsey\\Uuid\\Uuid"}],"associated":[{"kind":2,"name":"Ramsey\\Uuid\\UuidInterface"}],"doc":{"description":"Represents a universally unique identifier (UUID), according to RFC 4122.\n\nThis class provides immutable UUID objects (the Uuid class) and the static\nmethods `uuid1()`, `uuid3()`, `uuid4()`, and `uuid5()` for generating version\n1, 3, 4, and 5 UUIDs as specified in RFC 4122.\n\nIf all you want is a unique ID, you should probably call `uuid1()` or `uuid4()`.\nNote that `uuid1()` may compromise privacy since it creates a UUID containing\nthe computer’s network address. `uuid4()` creates a random UUID.","type":""},"modifiers":0}]},"_hash":533488322}]]