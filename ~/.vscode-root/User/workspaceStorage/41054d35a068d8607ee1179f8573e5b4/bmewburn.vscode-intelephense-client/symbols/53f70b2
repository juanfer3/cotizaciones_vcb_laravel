[["file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/nikic/php-parser/lib/PhpParser/Node/Name.php",{"_uri":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/nikic/php-parser/lib/PhpParser/Node/Name.php","_root":{"kind":4096,"name":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/nikic/php-parser/lib/PhpParser/Node/Name.php","location":{"uriHash":88043698,"range":{"start":{"line":0,"character":0},"end":{"line":196,"character":0}}},"children":[{"kind":512,"name":"PhpParser\\Node","location":{"uriHash":88043698,"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":25}}}},{"kind":1,"name":"NodeAbstract","location":{"uriHash":88043698,"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":26}}},"modifiers":4096,"associated":[{"kind":1,"name":"PhpParser\\NodeAbstract"}]},{"kind":1,"name":"PhpParser\\Node\\Name","location":{"uriHash":88043698,"range":{"start":{"line":6,"character":0},"end":{"line":195,"character":1}}},"children":[{"kind":16,"name":"$parts","location":{"uriHash":88043698,"range":{"start":{"line":11,"character":11},"end":{"line":11,"character":17}}},"doc":{"description":"Parts of the name","type":"string[]"},"modifiers":1,"scope":"PhpParser\\Node\\Name"},{"kind":32,"name":"__construct","location":{"uriHash":88043698,"range":{"start":{"line":19,"character":4},"end":{"line":22,"character":5}}},"doc":{"description":"Constructs a name node.","type":""},"modifiers":1,"type":"","children":[{"kind":128,"name":"$name","location":{"uriHash":88043698,"range":{"start":{"line":19,"character":32},"end":{"line":19,"character":37}}},"doc":{"description":"Name as string, part array or Name instance (copy ctor)","type":"string|array|PhpParser\\Node\\Name"},"scope":"__construct"},{"kind":128,"name":"$attributes","location":{"uriHash":88043698,"range":{"start":{"line":19,"character":39},"end":{"line":19,"character":66}}},"type":"array","doc":{"description":"Additional attributes","type":"array"},"value":"array()","scope":"__construct"}],"scope":"PhpParser\\Node\\Name"},{"kind":32,"name":"getSubNodeNames","location":{"uriHash":88043698,"range":{"start":{"line":24,"character":4},"end":{"line":26,"character":5}}},"modifiers":1,"type":"","children":[],"scope":"PhpParser\\Node\\Name"},{"kind":32,"name":"getFirst","location":{"uriHash":88043698,"range":{"start":{"line":33,"character":4},"end":{"line":35,"character":5}}},"doc":{"description":"Gets the first part of the name, i.e. everything before the first namespace separator.","type":"string"},"modifiers":1,"type":"","children":[],"scope":"PhpParser\\Node\\Name"},{"kind":32,"name":"getLast","location":{"uriHash":88043698,"range":{"start":{"line":42,"character":4},"end":{"line":44,"character":5}}},"doc":{"description":"Gets the last part of the name, i.e. everything after the last namespace separator.","type":"string"},"modifiers":1,"type":"","children":[],"scope":"PhpParser\\Node\\Name"},{"kind":32,"name":"isUnqualified","location":{"uriHash":88043698,"range":{"start":{"line":51,"character":4},"end":{"line":53,"character":5}}},"doc":{"description":"Checks whether the name is unqualified. (E.g. Name)","type":"bool"},"modifiers":1,"type":"","children":[],"scope":"PhpParser\\Node\\Name"},{"kind":32,"name":"isQualified","location":{"uriHash":88043698,"range":{"start":{"line":60,"character":4},"end":{"line":62,"character":5}}},"doc":{"description":"Checks whether the name is qualified. (E.g. Name\\Name)","type":"bool"},"modifiers":1,"type":"","children":[],"scope":"PhpParser\\Node\\Name"},{"kind":32,"name":"isFullyQualified","location":{"uriHash":88043698,"range":{"start":{"line":69,"character":4},"end":{"line":71,"character":5}}},"doc":{"description":"Checks whether the name is fully qualified. (E.g. \\Name)","type":"bool"},"modifiers":1,"type":"","children":[],"scope":"PhpParser\\Node\\Name"},{"kind":32,"name":"isRelative","location":{"uriHash":88043698,"range":{"start":{"line":78,"character":4},"end":{"line":80,"character":5}}},"doc":{"description":"Checks whether the name is explicitly relative to the current namespace. (E.g. namespace\\Name)","type":"bool"},"modifiers":1,"type":"","children":[],"scope":"PhpParser\\Node\\Name"},{"kind":32,"name":"toString","location":{"uriHash":88043698,"range":{"start":{"line":88,"character":4},"end":{"line":90,"character":5}}},"doc":{"description":"Returns a string representation of the name by imploding the namespace parts with the\nnamespace separator.","type":"string"},"modifiers":1,"type":"","children":[],"scope":"PhpParser\\Node\\Name"},{"kind":32,"name":"__toString","location":{"uriHash":88043698,"range":{"start":{"line":98,"character":4},"end":{"line":100,"character":5}}},"doc":{"description":"Returns a string representation of the name by imploding the namespace parts with the\nnamespace separator.","type":"string"},"modifiers":1,"type":"","children":[],"scope":"PhpParser\\Node\\Name"},{"kind":32,"name":"slice","location":{"uriHash":88043698,"range":{"start":{"line":118,"character":4},"end":{"line":141,"character":5}}},"doc":{"description":"Gets a slice of a name (similar to array_slice).\n\nThis method returns a new instance of the same type as the original and with the same\nattributes.\n\nIf the slice is empty, null is returned. The null value will be correctly handled in\nconcatenations using concat().\n\nOffset and length have the same meaning as in array_slice().","type":"static|null"},"modifiers":1,"type":"","children":[{"kind":128,"name":"$offset","location":{"uriHash":88043698,"range":{"start":{"line":118,"character":26},"end":{"line":118,"character":33}}},"doc":{"description":"Offset to start the slice at (may be negative)","type":"int"},"scope":"slice"},{"kind":128,"name":"$length","location":{"uriHash":88043698,"range":{"start":{"line":118,"character":35},"end":{"line":118,"character":49}}},"doc":{"description":"Length of the slice (may be negative)\n","type":"int|null"},"value":"null","scope":"slice"}],"scope":"PhpParser\\Node\\Name"},{"kind":32,"name":"concat","location":{"uriHash":88043698,"range":{"start":{"line":160,"character":4},"end":{"line":172,"character":5}}},"doc":{"description":"Concatenate two names, yielding a new Name instance.\n\nThe type of the generated instance depends on which class this method is called on, for\nexample Name\\FullyQualified::concat() will yield a Name\\FullyQualified instance.\n\nIf one of the arguments is null, a new instance of the other name will be returned. If both\narguments are null, null will be returned. As such, writing\nName::concat($namespace, $shortName)\nwhere $namespace is a Name node or null will work as expected.","type":"static|null"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$name1","location":{"uriHash":88043698,"range":{"start":{"line":160,"character":34},"end":{"line":160,"character":40}}},"doc":{"description":"The first name","type":"string|array|PhpParser\\Node\\Name|null"},"scope":"concat"},{"kind":128,"name":"$name2","location":{"uriHash":88043698,"range":{"start":{"line":160,"character":42},"end":{"line":160,"character":48}}},"doc":{"description":"The second name","type":"string|array|PhpParser\\Node\\Name|null"},"scope":"concat"},{"kind":128,"name":"$attributes","location":{"uriHash":88043698,"range":{"start":{"line":160,"character":50},"end":{"line":160,"character":72}}},"type":"array","doc":{"description":"Attributes to assign to concatenated name\n","type":"array"},"value":"[]","scope":"concat"}],"scope":"PhpParser\\Node\\Name"},{"kind":32,"name":"prepareName","location":{"uriHash":88043698,"range":{"start":{"line":182,"character":4},"end":{"line":194,"character":5}}},"doc":{"description":"Prepares a (string, array or Name node) name for use in name changing methods by converting\nit to an array.","type":"array"},"modifiers":36,"type":"","children":[{"kind":128,"name":"$name","location":{"uriHash":88043698,"range":{"start":{"line":182,"character":40},"end":{"line":182,"character":45}}},"doc":{"description":"Name to prepare\n","type":"string|array|PhpParser\\Node\\Name"},"scope":"prepareName"}],"scope":"PhpParser\\Node\\Name"}],"associated":[{"kind":1,"name":"PhpParser\\NodeAbstract"}],"modifiers":0}]},"_hash":88043698}]]