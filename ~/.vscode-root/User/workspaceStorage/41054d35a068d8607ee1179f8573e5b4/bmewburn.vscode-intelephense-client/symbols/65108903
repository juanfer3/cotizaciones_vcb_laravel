[["file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/symfony/http-foundation/File/MimeType/MimeTypeGuesser.php",{"_uri":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/symfony/http-foundation/File/MimeType/MimeTypeGuesser.php","_root":{"kind":4096,"name":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/symfony/http-foundation/File/MimeType/MimeTypeGuesser.php","location":{"uriHash":1695582467,"range":{"start":{"line":0,"character":0},"end":{"line":133,"character":0}}},"children":[{"kind":512,"name":"Symfony\\Component\\HttpFoundation\\File\\MimeType","location":{"uriHash":1695582467,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":57}}}},{"kind":1,"name":"AccessDeniedException","location":{"uriHash":1695582467,"range":{"start":{"line":13,"character":4},"end":{"line":13,"character":73}}},"modifiers":4096,"associated":[{"kind":1,"name":"Symfony\\Component\\HttpFoundation\\File\\Exception\\AccessDeniedException"}]},{"kind":1,"name":"FileNotFoundException","location":{"uriHash":1695582467,"range":{"start":{"line":14,"character":4},"end":{"line":14,"character":73}}},"modifiers":4096,"associated":[{"kind":1,"name":"Symfony\\Component\\HttpFoundation\\File\\Exception\\FileNotFoundException"}]},{"kind":1,"name":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\MimeTypeGuesser","location":{"uriHash":1695582467,"range":{"start":{"line":39,"character":0},"end":{"line":132,"character":1}}},"children":[{"kind":16,"name":"$instance","location":{"uriHash":1695582467,"range":{"start":{"line":46,"character":19},"end":{"line":46,"character":35}}},"doc":{"description":"","type":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\MimeTypeGuesser"},"value":"","modifiers":36,"scope":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\MimeTypeGuesser"},{"kind":16,"name":"$guessers","location":{"uriHash":1695582467,"range":{"start":{"line":53,"character":14},"end":{"line":53,"character":33}}},"doc":{"description":"","type":"array"},"value":"","modifiers":2,"scope":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\MimeTypeGuesser"},{"kind":32,"name":"getInstance","location":{"uriHash":1695582467,"range":{"start":{"line":60,"character":4},"end":{"line":67,"character":5}}},"doc":{"description":"Returns the singleton instance.","type":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\MimeTypeGuesser"},"modifiers":33,"type":"","children":[],"scope":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\MimeTypeGuesser"},{"kind":32,"name":"reset","location":{"uriHash":1695582467,"range":{"start":{"line":72,"character":4},"end":{"line":75,"character":5}}},"doc":{"description":"Resets the singleton instance.","type":""},"modifiers":33,"type":"","children":[],"scope":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\MimeTypeGuesser"},{"kind":32,"name":"__construct","location":{"uriHash":1695582467,"range":{"start":{"line":80,"character":4},"end":{"line":84,"character":5}}},"doc":{"description":"Registers all natively provided mime type guessers.","type":""},"modifiers":4,"type":"","children":[],"scope":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\MimeTypeGuesser"},{"kind":32,"name":"register","location":{"uriHash":1695582467,"range":{"start":{"line":91,"character":4},"end":{"line":94,"character":5}}},"doc":{"description":"Registers a new mime type guesser.\n\nWhen guessing, this guesser is preferred over previously registered ones.","type":""},"modifiers":1,"type":"","children":[{"kind":128,"name":"$guesser","location":{"uriHash":1695582467,"range":{"start":{"line":91,"character":29},"end":{"line":91,"character":62}}},"type":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\MimeTypeGuesserInterface","scope":"register"}],"scope":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\MimeTypeGuesser"},{"kind":32,"name":"guess","location":{"uriHash":1695582467,"range":{"start":{"line":112,"character":4},"end":{"line":131,"character":5}}},"doc":{"description":"Tries to guess the mime type of the given file.\n\nThe file is passed to each registered mime type guesser in reverse order\nof their registration (last registered is queried first). Once a guesser\nreturns a value that is not NULL, this method terminates and returns the\nvalue.","type":"string"},"modifiers":1,"type":"","children":[{"kind":128,"name":"$path","location":{"uriHash":1695582467,"range":{"start":{"line":112,"character":26},"end":{"line":112,"character":31}}},"doc":{"description":"The path to the file\n","type":"string"},"scope":"guess"}],"scope":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\MimeTypeGuesser"}],"associated":[{"kind":2,"name":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\MimeTypeGuesserInterface"}],"doc":{"description":"A singleton mime type guesser.\n\nBy default, all mime type guessers provided by the framework are installed\n(if available on the current OS/PHP setup).\n\nYou can register custom guessers by calling the register() method on the\nsingleton instance. Custom guessers are always called before any default ones.\n\n$guesser = MimeTypeGuesser::getInstance();\n$guesser->register(new MyCustomMimeTypeGuesser());\n\nIf you want to change the order of the default guessers, just re-register your\npreferred one as a custom one. The last registered guesser is preferred over\npreviously registered ones.\n\nRe-registering a built-in guesser also allows you to configure it:\n\n$guesser = MimeTypeGuesser::getInstance();\n$guesser->register(new FileinfoMimeTypeGuesser('/path/to/magic/file'));","type":""},"modifiers":0}]},"_hash":1695582467}]]