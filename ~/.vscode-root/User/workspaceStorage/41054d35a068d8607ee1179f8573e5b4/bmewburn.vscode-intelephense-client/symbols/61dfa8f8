[["file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/symfony/http-foundation/Session/Storage/Handler/PdoSessionHandler.php",{"_uri":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/symfony/http-foundation/Session/Storage/Handler/PdoSessionHandler.php","_root":{"kind":4096,"name":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/symfony/http-foundation/Session/Storage/Handler/PdoSessionHandler.php","location":{"uriHash":1642047736,"range":{"start":{"line":0,"character":0},"end":{"line":918,"character":0}}},"children":[{"kind":512,"name":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler","location":{"uriHash":1642047736,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":67}}}},{"kind":1,"name":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler","location":{"uriHash":1642047736,"range":{"start":{"line":40,"character":0},"end":{"line":917,"character":1}}},"children":[{"kind":1024,"name":"LOCK_NONE","location":{"uriHash":1642047736,"range":{"start":{"line":48,"character":10},"end":{"line":48,"character":23}}},"modifiers":33,"value":"0","scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":1024,"name":"LOCK_ADVISORY","location":{"uriHash":1642047736,"range":{"start":{"line":57,"character":10},"end":{"line":57,"character":27}}},"modifiers":33,"value":"1","scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":1024,"name":"LOCK_TRANSACTIONAL","location":{"uriHash":1642047736,"range":{"start":{"line":65,"character":10},"end":{"line":65,"character":32}}},"modifiers":33,"value":"2","scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$pdo","location":{"uriHash":1642047736,"range":{"start":{"line":70,"character":12},"end":{"line":70,"character":16}}},"doc":{"description":"PDO instance or null when not connected yet","type":"PDO|null"},"modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$dsn","location":{"uriHash":1642047736,"range":{"start":{"line":75,"character":12},"end":{"line":75,"character":24}}},"doc":{"description":"DSN string or null for session.save_path or false when lazy connection disabled","type":"string|false|null"},"value":"","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$driver","location":{"uriHash":1642047736,"range":{"start":{"line":80,"character":12},"end":{"line":80,"character":19}}},"doc":{"description":"Database driver","type":"string"},"modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$table","location":{"uriHash":1642047736,"range":{"start":{"line":85,"character":12},"end":{"line":85,"character":31}}},"doc":{"description":"Table name","type":"string"},"value":"'sessions'","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$idCol","location":{"uriHash":1642047736,"range":{"start":{"line":90,"character":12},"end":{"line":90,"character":30}}},"doc":{"description":"Column for session id","type":"string"},"value":"'sess_id'","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$dataCol","location":{"uriHash":1642047736,"range":{"start":{"line":95,"character":12},"end":{"line":95,"character":34}}},"doc":{"description":"Column for session data","type":"string"},"value":"'sess_data'","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$lifetimeCol","location":{"uriHash":1642047736,"range":{"start":{"line":100,"character":12},"end":{"line":100,"character":42}}},"doc":{"description":"Column for lifetime","type":"string"},"value":"'sess_lifetime'","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$timeCol","location":{"uriHash":1642047736,"range":{"start":{"line":105,"character":12},"end":{"line":105,"character":34}}},"doc":{"description":"Column for timestamp","type":"string"},"value":"'sess_time'","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$username","location":{"uriHash":1642047736,"range":{"start":{"line":110,"character":12},"end":{"line":110,"character":26}}},"doc":{"description":"Username when lazy-connect","type":"string"},"value":"''","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$password","location":{"uriHash":1642047736,"range":{"start":{"line":115,"character":12},"end":{"line":115,"character":26}}},"doc":{"description":"Password when lazy-connect","type":"string"},"value":"''","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$connectionOptions","location":{"uriHash":1642047736,"range":{"start":{"line":120,"character":12},"end":{"line":120,"character":40}}},"doc":{"description":"Connection options when lazy-connect","type":"array"},"value":"","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$lockMode","location":{"uriHash":1642047736,"range":{"start":{"line":125,"character":12},"end":{"line":125,"character":48}}},"doc":{"description":"The strategy for locking, see constants","type":"int"},"value":"","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$unlockStatements","location":{"uriHash":1642047736,"range":{"start":{"line":132,"character":12},"end":{"line":132,"character":39}}},"doc":{"description":"An array of statements to release advisory locks","type":"PDOStatement[]"},"value":"","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$sessionExpired","location":{"uriHash":1642047736,"range":{"start":{"line":137,"character":12},"end":{"line":137,"character":35}}},"doc":{"description":"True when the current session exists but expired according to session.gc_maxlifetime","type":"bool"},"value":"","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$inTransaction","location":{"uriHash":1642047736,"range":{"start":{"line":142,"character":12},"end":{"line":142,"character":34}}},"doc":{"description":"Whether a transaction is active","type":"bool"},"value":"","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":16,"name":"$gcCalled","location":{"uriHash":1642047736,"range":{"start":{"line":147,"character":12},"end":{"line":147,"character":29}}},"doc":{"description":"Whether gc() has been called","type":"bool"},"value":"","modifiers":4,"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"__construct","location":{"uriHash":1642047736,"range":{"start":{"line":171,"character":4},"end":{"line":195,"character":5}}},"doc":{"description":"You can either pass an existing database connection as PDO instance or\npass a DSN string that will be used to lazy-connect to the database\nwhen the session is actually used. Furthermore it's possible to pass null\nwhich will then use the session.save_path ini setting as PDO DSN parameter.\n\nList of available options:\n* db_table: The name of the table [default: sessions]\n* db_id_col: The column where to store the session id [default: sess_id]\n* db_data_col: The column where to store the session data [default: sess_data]\n* db_lifetime_col: The column where to store the lifetime [default: sess_lifetime]\n* db_time_col: The column where to store the timestamp [default: sess_time]\n* db_username: The username when lazy-connect [default: '']\n* db_password: The password when lazy-connect [default: '']\n* db_connection_options: An array of driver-specific connection options [default: array()]\n* lock_mode: The strategy for locking, see constants [default: LOCK_TRANSACTIONAL]","type":""},"modifiers":1,"type":"","children":[{"kind":128,"name":"$pdoOrDsn","location":{"uriHash":1642047736,"range":{"start":{"line":171,"character":32},"end":{"line":171,"character":48}}},"doc":{"description":"A \\PDO instance or DSN string or URL string or null","type":"PDO|string|null"},"value":"null","scope":"__construct"},{"kind":128,"name":"$options","location":{"uriHash":1642047736,"range":{"start":{"line":171,"character":50},"end":{"line":171,"character":74}}},"type":"array","doc":{"description":"An associative array of options\n","type":"array"},"value":"array()","scope":"__construct"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"createTable","location":{"uriHash":1642047736,"range":{"start":{"line":208,"character":4},"end":{"line":245,"character":5}}},"doc":{"description":"Creates the table to store sessions which can be called once for setup.\n\nSession ID is saved in a column of maximum length 128 because that is enough even\nfor a 512 bit configured session.hash_function like Whirlpool. Session data is\nsaved in a BLOB. One could also use a shorter inlined varbinary column\nif one was sure the data fits into it.","type":""},"modifiers":1,"type":"","children":[],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"isSessionExpired","location":{"uriHash":1642047736,"range":{"start":{"line":254,"character":4},"end":{"line":257,"character":5}}},"doc":{"description":"Returns true when the current session exists but expired according to session.gc_maxlifetime.\n\nCan be used to distinguish between a new session and one that expired due to inactivity.","type":"bool"},"modifiers":1,"type":"","children":[],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"open","location":{"uriHash":1642047736,"range":{"start":{"line":262,"character":4},"end":{"line":271,"character":5}}},"doc":{"description":"{@inheritdoc}","type":""},"modifiers":1,"type":"","children":[{"kind":128,"name":"$savePath","location":{"uriHash":1642047736,"range":{"start":{"line":262,"character":25},"end":{"line":262,"character":34}}},"scope":"open"},{"kind":128,"name":"$sessionName","location":{"uriHash":1642047736,"range":{"start":{"line":262,"character":36},"end":{"line":262,"character":48}}},"scope":"open"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"read","location":{"uriHash":1642047736,"range":{"start":{"line":276,"character":4},"end":{"line":285,"character":5}}},"doc":{"description":"{@inheritdoc}","type":""},"modifiers":1,"type":"","children":[{"kind":128,"name":"$sessionId","location":{"uriHash":1642047736,"range":{"start":{"line":276,"character":25},"end":{"line":276,"character":35}}},"scope":"read"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"gc","location":{"uriHash":1642047736,"range":{"start":{"line":290,"character":4},"end":{"line":297,"character":5}}},"doc":{"description":"{@inheritdoc}","type":""},"modifiers":1,"type":"","children":[{"kind":128,"name":"$maxlifetime","location":{"uriHash":1642047736,"range":{"start":{"line":290,"character":23},"end":{"line":290,"character":35}}},"scope":"gc"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"doDestroy","location":{"uriHash":1642047736,"range":{"start":{"line":302,"character":4},"end":{"line":318,"character":5}}},"doc":{"description":"{@inheritdoc}","type":""},"modifiers":2,"type":"","children":[{"kind":128,"name":"$sessionId","location":{"uriHash":1642047736,"range":{"start":{"line":302,"character":33},"end":{"line":302,"character":43}}},"scope":"doDestroy"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"doWrite","location":{"uriHash":1642047736,"range":{"start":{"line":323,"character":4},"end":{"line":364,"character":5}}},"doc":{"description":"{@inheritdoc}","type":""},"modifiers":2,"type":"","children":[{"kind":128,"name":"$sessionId","location":{"uriHash":1642047736,"range":{"start":{"line":323,"character":31},"end":{"line":323,"character":41}}},"scope":"doWrite"},{"kind":128,"name":"$data","location":{"uriHash":1642047736,"range":{"start":{"line":323,"character":43},"end":{"line":323,"character":48}}},"scope":"doWrite"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"updateTimestamp","location":{"uriHash":1642047736,"range":{"start":{"line":369,"character":4},"end":{"line":388,"character":5}}},"doc":{"description":"{@inheritdoc}","type":""},"modifiers":1,"type":"","children":[{"kind":128,"name":"$sessionId","location":{"uriHash":1642047736,"range":{"start":{"line":369,"character":36},"end":{"line":369,"character":46}}},"scope":"updateTimestamp"},{"kind":128,"name":"$data","location":{"uriHash":1642047736,"range":{"start":{"line":369,"character":48},"end":{"line":369,"character":53}}},"scope":"updateTimestamp"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"close","location":{"uriHash":1642047736,"range":{"start":{"line":393,"character":4},"end":{"line":421,"character":5}}},"doc":{"description":"{@inheritdoc}","type":""},"modifiers":1,"type":"","children":[],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"connect","location":{"uriHash":1642047736,"range":{"start":{"line":428,"character":4},"end":{"line":433,"character":5}}},"doc":{"description":"Lazy-connects to the database.","type":""},"modifiers":4,"type":"","children":[{"kind":128,"name":"$dsn","location":{"uriHash":1642047736,"range":{"start":{"line":428,"character":29},"end":{"line":428,"character":33}}},"doc":{"description":"DSN string","type":"string"},"scope":"connect"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"buildDsnFromUrl","location":{"uriHash":1642047736,"range":{"start":{"line":444,"character":4},"end":{"line":529,"character":5}}},"doc":{"description":"Builds a PDO DSN from a URL-like connection string.","type":"string"},"modifiers":4,"type":"","children":[{"kind":128,"name":"$dsnOrUrl","location":{"uriHash":1642047736,"range":{"start":{"line":444,"character":37},"end":{"line":444,"character":46}}},"doc":{"description":"","type":"string"},"scope":"buildDsnFromUrl"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"beginTransaction","location":{"uriHash":1642047736,"range":{"start":{"line":543,"character":4},"end":{"line":556,"character":5}}},"doc":{"description":"Helper method to begin a transaction.\n\nSince SQLite does not support row level locks, we have to acquire a reserved lock\non the database immediately. Because of https://bugs.php.net/42766 we have to create\nsuch a transaction manually which also means we cannot use PDO::commit or\nPDO::rollback or PDO::inTransaction for SQLite.\n\nAlso MySQLs default isolation, REPEATABLE READ, causes deadlock for different sessions\ndue to http://www.mysqlperformanceblog.com/2013/12/12/one-more-innodb-gap-lock-to-avoid/ .\nSo we change it to READ COMMITTED.","type":""},"modifiers":4,"type":"","children":[],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"commit","location":{"uriHash":1642047736,"range":{"start":{"line":561,"character":4},"end":{"line":578,"character":5}}},"doc":{"description":"Helper method to commit a transaction.","type":""},"modifiers":4,"type":"","children":[],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"rollback","location":{"uriHash":1642047736,"range":{"start":{"line":583,"character":4},"end":{"line":597,"character":5}}},"doc":{"description":"Helper method to rollback a transaction.","type":""},"modifiers":4,"type":"","children":[],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"doRead","location":{"uriHash":1642047736,"range":{"start":{"line":609,"character":4},"end":{"line":665,"character":5}}},"doc":{"description":"Reads the session data in respect to the different locking strategies.\n\nWe need to make sure we do not return session data that is already considered garbage according\nto the session.gc_maxlifetime setting because gc() is called after read() and only sometimes.","type":"string"},"modifiers":2,"type":"","children":[{"kind":128,"name":"$sessionId","location":{"uriHash":1642047736,"range":{"start":{"line":609,"character":30},"end":{"line":609,"character":40}}},"doc":{"description":"Session ID\n","type":"string"},"scope":"doRead"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"doAdvisoryLock","location":{"uriHash":1642047736,"range":{"start":{"line":680,"character":4},"end":{"line":729,"character":5}}},"doc":{"description":"Executes an application-level lock on the database.","type":"PDOStatement"},"modifiers":4,"type":"","children":[{"kind":128,"name":"$sessionId","location":{"uriHash":1642047736,"range":{"start":{"line":680,"character":36},"end":{"line":680,"character":46}}},"doc":{"description":"Session ID\n","type":"string"},"scope":"doAdvisoryLock"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"convertStringToInt","location":{"uriHash":1642047736,"range":{"start":{"line":740,"character":4},"end":{"line":750,"character":5}}},"doc":{"description":"Encodes the first 4 (when PHP_INT_SIZE == 4) or 8 characters of the string as an integer.\n\nKeep in mind, PHP integers are signed.","type":"int"},"modifiers":4,"type":"","children":[{"kind":128,"name":"$string","location":{"uriHash":1642047736,"range":{"start":{"line":740,"character":40},"end":{"line":740,"character":47}}},"doc":{"description":"","type":"string"},"scope":"convertStringToInt"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"getSelectSql","location":{"uriHash":1642047736,"range":{"start":{"line":759,"character":4},"end":{"line":780,"character":5}}},"doc":{"description":"Return a locking or nonlocking SQL query to read session information.","type":"string"},"modifiers":4,"type":"","children":[],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"getInsertStatement","location":{"uriHash":1642047736,"range":{"start":{"line":791,"character":4},"end":{"line":813,"character":5}}},"doc":{"description":"Returns an insert statement supported by the database for writing session data.","type":"PDOStatement"},"modifiers":4,"type":"","children":[{"kind":128,"name":"$sessionId","location":{"uriHash":1642047736,"range":{"start":{"line":791,"character":40},"end":{"line":791,"character":50}}},"doc":{"description":"Session ID","type":"string"},"scope":"getInsertStatement"},{"kind":128,"name":"$sessionData","location":{"uriHash":1642047736,"range":{"start":{"line":791,"character":52},"end":{"line":791,"character":64}}},"doc":{"description":"Encoded session data","type":"string"},"scope":"getInsertStatement"},{"kind":128,"name":"$maxlifetime","location":{"uriHash":1642047736,"range":{"start":{"line":791,"character":66},"end":{"line":791,"character":78}}},"doc":{"description":"session.gc_maxlifetime\n","type":"int"},"scope":"getInsertStatement"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"getUpdateStatement","location":{"uriHash":1642047736,"range":{"start":{"line":824,"character":4},"end":{"line":846,"character":5}}},"doc":{"description":"Returns an update statement supported by the database for writing session data.","type":"PDOStatement"},"modifiers":4,"type":"","children":[{"kind":128,"name":"$sessionId","location":{"uriHash":1642047736,"range":{"start":{"line":824,"character":40},"end":{"line":824,"character":50}}},"doc":{"description":"Session ID","type":"string"},"scope":"getUpdateStatement"},{"kind":128,"name":"$sessionData","location":{"uriHash":1642047736,"range":{"start":{"line":824,"character":52},"end":{"line":824,"character":64}}},"doc":{"description":"Encoded session data","type":"string"},"scope":"getUpdateStatement"},{"kind":128,"name":"$maxlifetime","location":{"uriHash":1642047736,"range":{"start":{"line":824,"character":66},"end":{"line":824,"character":78}}},"doc":{"description":"session.gc_maxlifetime\n","type":"int"},"scope":"getUpdateStatement"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"getMergeStatement","location":{"uriHash":1642047736,"range":{"start":{"line":857,"character":4},"end":{"line":902,"character":5}}},"doc":{"description":"Returns a merge/upsert (i.e. insert or update) statement when supported by the database for writing session data.","type":"PDOStatement|null"},"modifiers":4,"type":"","children":[{"kind":128,"name":"$sessionId","location":{"uriHash":1642047736,"range":{"start":{"line":857,"character":39},"end":{"line":857,"character":49}}},"doc":{"description":"Session ID","type":"string"},"scope":"getMergeStatement"},{"kind":128,"name":"$data","location":{"uriHash":1642047736,"range":{"start":{"line":857,"character":51},"end":{"line":857,"character":56}}},"doc":{"description":"Encoded session data","type":"string"},"scope":"getMergeStatement"},{"kind":128,"name":"$maxlifetime","location":{"uriHash":1642047736,"range":{"start":{"line":857,"character":58},"end":{"line":857,"character":70}}},"doc":{"description":"session.gc_maxlifetime\n","type":"int"},"scope":"getMergeStatement"}],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"},{"kind":32,"name":"getConnection","location":{"uriHash":1642047736,"range":{"start":{"line":909,"character":4},"end":{"line":916,"character":5}}},"doc":{"description":"Return a PDO instance.","type":"PDO"},"modifiers":2,"type":"","children":[],"scope":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler"}],"associated":[{"kind":1,"name":"Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler"}],"doc":{"description":"Session handler using a PDO connection to read and write data.\n\nIt works with MySQL, PostgreSQL, Oracle, SQL Server and SQLite and implements\ndifferent locking strategies to handle concurrent access to the same session.\nLocking is necessary to prevent loss of data due to race conditions and to keep\nthe session data consistent between read() and write(). With locking, requests\nfor the same session will wait until the other one finished writing. For this\nreason it's best practice to close a session as early as possible to improve\nconcurrency. PHPs internal files session handler also implements locking.\n\nAttention: Since SQLite does not support row level locks but locks the whole database,\nit means only one session can be accessed at a time. Even different sessions would wait\nfor another to finish. So saving session in SQLite should only be considered for\ndevelopment or prototypes.\n\nSession data is a binary string that can contain non-printable characters like the null byte.\nFor this reason it must be saved in a binary column in the database like BLOB in MySQL.\nSaving it in a character column could corrupt the data. You can use createTable()\nto initialize a correctly defined table.","type":""},"modifiers":0}]},"_hash":1642047736}]]