[["file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/symfony/http-foundation/File/MimeType/ExtensionGuesser.php",{"_uri":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/symfony/http-foundation/File/MimeType/ExtensionGuesser.php","_root":{"kind":4096,"name":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/symfony/http-foundation/File/MimeType/ExtensionGuesser.php","location":{"uriHash":998358580,"range":{"start":{"line":0,"character":0},"end":{"line":94,"character":0}}},"children":[{"kind":512,"name":"Symfony\\Component\\HttpFoundation\\File\\MimeType","location":{"uriHash":998358580,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":57}}}},{"kind":1,"name":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\ExtensionGuesser","location":{"uriHash":998358580,"range":{"start":{"line":25,"character":0},"end":{"line":93,"character":1}}},"children":[{"kind":16,"name":"$instance","location":{"uriHash":998358580,"range":{"start":{"line":32,"character":19},"end":{"line":32,"character":35}}},"doc":{"description":"","type":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\ExtensionGuesser"},"value":"","modifiers":36,"scope":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\ExtensionGuesser"},{"kind":16,"name":"$guessers","location":{"uriHash":998358580,"range":{"start":{"line":39,"character":14},"end":{"line":39,"character":33}}},"doc":{"description":"","type":"array"},"value":"","modifiers":2,"scope":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\ExtensionGuesser"},{"kind":32,"name":"getInstance","location":{"uriHash":998358580,"range":{"start":{"line":46,"character":4},"end":{"line":53,"character":5}}},"doc":{"description":"Returns the singleton instance.","type":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\ExtensionGuesser"},"modifiers":33,"type":"","children":[],"scope":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\ExtensionGuesser"},{"kind":32,"name":"__construct","location":{"uriHash":998358580,"range":{"start":{"line":58,"character":4},"end":{"line":61,"character":5}}},"doc":{"description":"Registers all natively provided extension guessers.","type":""},"modifiers":4,"type":"","children":[],"scope":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\ExtensionGuesser"},{"kind":32,"name":"register","location":{"uriHash":998358580,"range":{"start":{"line":68,"character":4},"end":{"line":71,"character":5}}},"doc":{"description":"Registers a new extension guesser.\n\nWhen guessing, this guesser is preferred over previously registered ones.","type":""},"modifiers":1,"type":"","children":[{"kind":128,"name":"$guesser","location":{"uriHash":998358580,"range":{"start":{"line":68,"character":29},"end":{"line":68,"character":63}}},"type":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\ExtensionGuesserInterface","scope":"register"}],"scope":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\ExtensionGuesser"},{"kind":32,"name":"guess","location":{"uriHash":998358580,"range":{"start":{"line":85,"character":4},"end":{"line":92,"character":5}}},"doc":{"description":"Tries to guess the extension.\n\nThe mime type is passed to each registered mime type guesser in reverse order\nof their registration (last registered is queried first). Once a guesser\nreturns a value that is not NULL, this method terminates and returns the\nvalue.","type":"string"},"modifiers":1,"type":"","children":[{"kind":128,"name":"$mimeType","location":{"uriHash":998358580,"range":{"start":{"line":85,"character":26},"end":{"line":85,"character":35}}},"doc":{"description":"The mime type\n","type":"string"},"scope":"guess"}],"scope":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\ExtensionGuesser"}],"associated":[{"kind":2,"name":"Symfony\\Component\\HttpFoundation\\File\\MimeType\\ExtensionGuesserInterface"}],"doc":{"description":"A singleton mime type to file extension guesser.\n\nA default guesser is provided.\nYou can register custom guessers by calling the register()\nmethod on the singleton instance:\n\n$guesser = ExtensionGuesser::getInstance();\n$guesser->register(new MyCustomExtensionGuesser());\n\nThe last registered guesser is preferred over previously registered ones.","type":""},"modifiers":0}]},"_hash":998358580}]]