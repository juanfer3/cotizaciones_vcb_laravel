[["file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/doctrine/inflector/lib/Doctrine/Common/Inflector/Inflector.php",{"_uri":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/doctrine/inflector/lib/Doctrine/Common/Inflector/Inflector.php","_root":{"kind":4096,"name":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/doctrine/inflector/lib/Doctrine/Common/Inflector/Inflector.php","location":{"uriHash":257441772,"range":{"start":{"line":0,"character":0},"end":{"line":482,"character":0}}},"children":[{"kind":512,"name":"Doctrine\\Common\\Inflector","location":{"uriHash":257441772,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":36}}}},{"kind":1,"name":"Doctrine\\Common\\Inflector\\Inflector","location":{"uriHash":257441772,"range":{"start":{"line":35,"character":0},"end":{"line":481,"character":1}}},"children":[{"kind":16,"name":"$plural","location":{"uriHash":257441772,"range":{"start":{"line":42,"character":19},"end":{"line":130,"character":5}}},"doc":{"description":"","type":"array"},"value":"","modifiers":36,"scope":"Doctrine\\Common\\Inflector\\Inflector"},{"kind":16,"name":"$singular","location":{"uriHash":257441772,"range":{"start":{"line":137,"character":19},"end":{"line":197,"character":5}}},"doc":{"description":"","type":"array"},"value":"","modifiers":36,"scope":"Doctrine\\Common\\Inflector\\Inflector"},{"kind":16,"name":"$uninflected","location":{"uriHash":257441772,"range":{"start":{"line":204,"character":19},"end":{"line":217,"character":5}}},"doc":{"description":"","type":"array"},"value":"","modifiers":36,"scope":"Doctrine\\Common\\Inflector\\Inflector"},{"kind":16,"name":"$cache","location":{"uriHash":257441772,"range":{"start":{"line":224,"character":19},"end":{"line":224,"character":35}}},"doc":{"description":"","type":"array"},"value":"","modifiers":36,"scope":"Doctrine\\Common\\Inflector\\Inflector"},{"kind":16,"name":"$initialState","location":{"uriHash":257441772,"range":{"start":{"line":231,"character":19},"end":{"line":231,"character":42}}},"doc":{"description":"","type":"array"},"value":"","modifiers":36,"scope":"Doctrine\\Common\\Inflector\\Inflector"},{"kind":32,"name":"tableize","location":{"uriHash":257441772,"range":{"start":{"line":240,"character":4},"end":{"line":243,"character":5}}},"doc":{"description":"Converts a word into the format for a Doctrine table name. Converts 'ModelName' to 'model_name'.","type":"string"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$word","location":{"uriHash":257441772,"range":{"start":{"line":240,"character":36},"end":{"line":240,"character":41}}},"doc":{"description":"The word to tableize.\n","type":"string"},"scope":"tableize"}],"scope":"Doctrine\\Common\\Inflector\\Inflector"},{"kind":32,"name":"classify","location":{"uriHash":257441772,"range":{"start":{"line":252,"character":4},"end":{"line":255,"character":5}}},"doc":{"description":"Converts a word into the format for a Doctrine class name. Converts 'table_name' to 'TableName'.","type":"string"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$word","location":{"uriHash":257441772,"range":{"start":{"line":252,"character":36},"end":{"line":252,"character":41}}},"doc":{"description":"The word to classify.\n","type":"string"},"scope":"classify"}],"scope":"Doctrine\\Common\\Inflector\\Inflector"},{"kind":32,"name":"camelize","location":{"uriHash":257441772,"range":{"start":{"line":264,"character":4},"end":{"line":267,"character":5}}},"doc":{"description":"Camelizes a word. This uses the classify() method and turns the first character to lowercase.","type":"string"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$word","location":{"uriHash":257441772,"range":{"start":{"line":264,"character":36},"end":{"line":264,"character":41}}},"doc":{"description":"The word to camelize.\n","type":"string"},"scope":"camelize"}],"scope":"Doctrine\\Common\\Inflector\\Inflector"},{"kind":32,"name":"ucwords","location":{"uriHash":257441772,"range":{"start":{"line":294,"character":4},"end":{"line":303,"character":5}}},"doc":{"description":"Uppercases words with configurable delimeters between words.\n\nTakes a string and capitalizes all of the words, like PHP's built-in\nucwords function.  This extends that behavior, however, by allowing the\nword delimeters to be configured, rather than only separating on\nwhitespace.\n\nHere is an example:\n<code>\n<?php\n$string = 'top-o-the-morning to all_of_you!';\necho \\Doctrine\\Common\\Inflector\\Inflector::ucwords($string);\n// Top-O-The-Morning To All_of_you!\n\necho \\Doctrine\\Common\\Inflector\\Inflector::ucwords($string, '-_ ');\n// Top-O-The-Morning To All_Of_You!\n?>\n</code>","type":"string"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$string","location":{"uriHash":257441772,"range":{"start":{"line":294,"character":35},"end":{"line":294,"character":42}}},"doc":{"description":"The string to operate on.","type":"string"},"scope":"ucwords"},{"kind":128,"name":"$delimiters","location":{"uriHash":257441772,"range":{"start":{"line":294,"character":44},"end":{"line":294,"character":74}}},"doc":{"description":"A list of word separators.\n","type":"string"},"value":"\" \\n\\t\\r\\0\\x0B-\"","scope":"ucwords"},{"kind":64,"name":"#anon#file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/doctrine/inflector/lib/Doctrine/Common/Inflector/Inflector.php#10698","location":{"uriHash":257441772,"range":{"start":{"line":298,"character":12},"end":{"line":300,"character":13}}},"modifiers":512,"type":"","children":[{"kind":128,"name":"$matches","location":{"uriHash":257441772,"range":{"start":{"line":298,"character":21},"end":{"line":298,"character":29}}},"scope":"#anon#file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/doctrine/inflector/lib/Doctrine/Common/Inflector/Inflector.php#10698"}],"scope":"ucwords"}],"scope":"Doctrine\\Common\\Inflector\\Inflector"},{"kind":32,"name":"reset","location":{"uriHash":257441772,"range":{"start":{"line":311,"character":4},"end":{"line":324,"character":5}}},"doc":{"description":"Clears Inflectors inflected value caches, and resets the inflection\nrules to the initial values.","type":"void"},"modifiers":33,"type":"","children":[],"scope":"Doctrine\\Common\\Inflector\\Inflector"},{"kind":32,"name":"rules","location":{"uriHash":257441772,"range":{"start":{"line":347,"character":4},"end":{"line":376,"character":5}}},"doc":{"description":"Adds custom inflection $rules, of either 'plural' or 'singular' $type.\n\n### Usage:\n\n{{{\nInflector::rules('plural', array('/^(inflect)or$/i' => '\\1ables'));\nInflector::rules('plural', array(\n'rules' => array('/^(inflect)ors$/i' => '\\1ables'),\n'uninflected' => array('dontinflectme'),\n'irregular' => array('red' => 'redlings')\n));\n}}}","type":"void"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$type","location":{"uriHash":257441772,"range":{"start":{"line":347,"character":33},"end":{"line":347,"character":38}}},"doc":{"description":"The type of inflection, either 'plural' or 'singular'","type":"string"},"scope":"rules"},{"kind":128,"name":"$rules","location":{"uriHash":257441772,"range":{"start":{"line":347,"character":40},"end":{"line":347,"character":46}}},"doc":{"description":"An array of rules to be added.","type":"array"},"scope":"rules"},{"kind":128,"name":"$reset","location":{"uriHash":257441772,"range":{"start":{"line":347,"character":48},"end":{"line":347,"character":62}}},"doc":{"description":"If true, will unset default inflections for all\nnew rules that are being defined in $rules.\n","type":"boolean"},"value":"false","scope":"rules"}],"scope":"Doctrine\\Common\\Inflector\\Inflector"},{"kind":32,"name":"pluralize","location":{"uriHash":257441772,"range":{"start":{"line":385,"character":4},"end":{"line":423,"character":5}}},"doc":{"description":"Returns a word in plural form.","type":"string"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$word","location":{"uriHash":257441772,"range":{"start":{"line":385,"character":37},"end":{"line":385,"character":42}}},"doc":{"description":"The word in singular form.\n","type":"string"},"scope":"pluralize"}],"scope":"Doctrine\\Common\\Inflector\\Inflector"},{"kind":32,"name":"singularize","location":{"uriHash":257441772,"range":{"start":{"line":432,"character":4},"end":{"line":480,"character":5}}},"doc":{"description":"Returns a word in singular form.","type":"string"},"modifiers":33,"type":"","children":[{"kind":128,"name":"$word","location":{"uriHash":257441772,"range":{"start":{"line":432,"character":39},"end":{"line":432,"character":44}}},"doc":{"description":"The word in plural form.\n","type":"string"},"scope":"singularize"}],"scope":"Doctrine\\Common\\Inflector\\Inflector"}],"associated":[],"doc":{"description":"Doctrine inflector has static methods for inflecting text.\n\nThe methods in these classes are from several different sources collected\nacross several different php projects and several different authors. The\noriginal author names and emails are not known.\n\nPluralize & Singularize implementation are borrowed from CakePHP with some modifications.","type":""},"modifiers":0}]},"_hash":257441772}]]