[["file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/phpdocumentor/reflection-docblock/src/DocBlock/TagFactory.php",{"_uri":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/phpdocumentor/reflection-docblock/src/DocBlock/TagFactory.php","_root":{"kind":4096,"name":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/phpdocumentor/reflection-docblock/src/DocBlock/TagFactory.php","location":{"uriHash":868934420,"range":{"start":{"line":0,"character":0},"end":{"line":93,"character":0}}},"children":[{"kind":512,"name":"phpDocumentor\\Reflection\\DocBlock","location":{"uriHash":868934420,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":44}}}},{"kind":1,"name":"TypeContext","location":{"uriHash":868934420,"range":{"start":{"line":14,"character":46},"end":{"line":14,"character":57}}},"modifiers":4096,"associated":[{"kind":1,"name":"phpDocumentor\\Reflection\\Types\\Context"}]},{"kind":2,"name":"phpDocumentor\\Reflection\\DocBlock\\TagFactory","location":{"uriHash":868934420,"range":{"start":{"line":16,"character":0},"end":{"line":92,"character":1}}},"doc":{"description":"This file is part of phpDocumentor.\n\nFor the full copyright and license information, please view the LICENSE\nfile that was distributed with this source code.","type":""},"children":[{"kind":32,"name":"addParameter","location":{"uriHash":868934420,"range":{"start":{"line":41,"character":4},"end":{"line":41,"character":48}}},"doc":{"description":"Adds a parameter to the service locator that can be injected in a tag's factory method.\n\nWhen calling a tag's \"create\" method we always check the signature for dependencies to inject. One way is to\ntypehint a parameter in the signature so that we can use that interface or class name to inject a dependency\n(see {@see addService()} for more information on that).\n\nAnother way is to check the name of the argument against the names in the Service Locator. With this method\nyou can add a variable that will be inserted when a tag's create method is not typehinted and has a matching\nname.\n\nBe aware that there are two reserved names:\n\n- name, representing the name of the tag.\n- body, representing the complete body of the tag.\n\nThese parameters are injected at the last moment and will override any existing parameter with those names.","type":"void"},"modifiers":1,"type":"","children":[{"kind":128,"name":"$name","location":{"uriHash":868934420,"range":{"start":{"line":41,"character":33},"end":{"line":41,"character":38}}},"doc":{"description":"","type":"string"},"scope":"addParameter"},{"kind":128,"name":"$value","location":{"uriHash":868934420,"range":{"start":{"line":41,"character":40},"end":{"line":41,"character":46}}},"doc":{"description":"","type":"mixed"},"scope":"addParameter"}],"scope":"phpDocumentor\\Reflection\\DocBlock\\TagFactory"},{"kind":32,"name":"addService","location":{"uriHash":868934420,"range":{"start":{"line":57,"character":4},"end":{"line":57,"character":41}}},"doc":{"description":"Registers a service with the Service Locator using the FQCN of the class or the alias, if provided.\n\nWhen calling a tag's \"create\" method we always check the signature for dependencies to inject. If a parameter\nhas a typehint then the ServiceLocator is queried to see if a Service is registered for that typehint.\n\nBecause interfaces are regularly used as type-hints this method provides an alias parameter; if the FQCN of the\ninterface is passed as alias then every time that interface is requested the provided service will be returned.","type":"void"},"modifiers":1,"type":"","children":[{"kind":128,"name":"$service","location":{"uriHash":868934420,"range":{"start":{"line":57,"character":31},"end":{"line":57,"character":39}}},"doc":{"description":"","type":"object"},"scope":"addService"}],"scope":"phpDocumentor\\Reflection\\DocBlock\\TagFactory"},{"kind":32,"name":"create","location":{"uriHash":868934420,"range":{"start":{"line":69,"character":4},"end":{"line":69,"character":66}}},"doc":{"description":"Factory method responsible for instantiating the correct sub type.","type":"phpDocumentor\\Reflection\\DocBlock\\Tag"},"modifiers":1,"type":"","children":[{"kind":128,"name":"$tagLine","location":{"uriHash":868934420,"range":{"start":{"line":69,"character":27},"end":{"line":69,"character":35}}},"doc":{"description":"The text for this tag, including description.","type":"string"},"scope":"create"},{"kind":128,"name":"$context","location":{"uriHash":868934420,"range":{"start":{"line":69,"character":37},"end":{"line":69,"character":64}}},"type":"phpDocumentor\\Reflection\\Types\\Context","doc":{"description":"","type":"phpDocumentor\\Reflection\\Types\\Context"},"value":"null","scope":"create"}],"scope":"phpDocumentor\\Reflection\\DocBlock\\TagFactory"},{"kind":32,"name":"registerTagHandler","location":{"uriHash":868934420,"range":{"start":{"line":91,"character":4},"end":{"line":91,"character":59}}},"doc":{"description":"Registers a handler for tags.\n\nIf you want to use your own tags then you can use this method to instruct the TagFactory to register the name\nof a tag with the FQCN of a 'Tag Handler'. The Tag handler should implement the {@see Tag} interface (and thus\nthe create method).","type":"void"},"modifiers":1,"type":"","children":[{"kind":128,"name":"$tagName","location":{"uriHash":868934420,"range":{"start":{"line":91,"character":39},"end":{"line":91,"character":47}}},"doc":{"description":"Name of tag to register a handler for. When registering a namespaced tag, the full\nname, along with a prefixing slash MUST be provided.","type":"string"},"scope":"registerTagHandler"},{"kind":128,"name":"$handler","location":{"uriHash":868934420,"range":{"start":{"line":91,"character":49},"end":{"line":91,"character":57}}},"doc":{"description":"FQCN of handler.\n","type":"string"},"scope":"registerTagHandler"}],"scope":"phpDocumentor\\Reflection\\DocBlock\\TagFactory"}],"associated":[]}]},"_hash":868934420}]]