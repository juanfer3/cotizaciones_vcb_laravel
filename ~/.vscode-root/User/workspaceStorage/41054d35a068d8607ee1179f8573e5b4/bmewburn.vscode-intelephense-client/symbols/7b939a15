[["file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Core/Is.php",{"_uri":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Core/Is.php","_root":{"kind":4096,"name":"file:///home/jfvilladiego/proyectos_laravel/cotizaciones_vcb_laravel/vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Core/Is.php","location":{"uriHash":2073270805,"range":{"start":{"line":0,"character":0},"end":{"line":57,"character":0}}},"children":[{"kind":512,"name":"Hamcrest\\Core","location":{"uriHash":2073270805,"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":24}}}},{"kind":1,"name":"BaseMatcher","location":{"uriHash":2073270805,"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":24}}},"modifiers":4096,"associated":[{"kind":1,"name":"Hamcrest\\BaseMatcher"}]},{"kind":1,"name":"Description","location":{"uriHash":2073270805,"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":24}}},"modifiers":4096,"associated":[{"kind":1,"name":"Hamcrest\\Description"}]},{"kind":1,"name":"Matcher","location":{"uriHash":2073270805,"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":20}}},"modifiers":4096,"associated":[{"kind":1,"name":"Hamcrest\\Matcher"}]},{"kind":1,"name":"Util","location":{"uriHash":2073270805,"range":{"start":{"line":9,"character":4},"end":{"line":9,"character":17}}},"modifiers":4096,"associated":[{"kind":1,"name":"Hamcrest\\Util"}]},{"kind":1,"name":"Hamcrest\\Core\\Is","location":{"uriHash":2073270805,"range":{"start":{"line":18,"character":0},"end":{"line":56,"character":1}}},"children":[{"kind":16,"name":"$_matcher","location":{"uriHash":2073270805,"range":{"start":{"line":21,"character":12},"end":{"line":21,"character":21}}},"modifiers":4,"scope":"Hamcrest\\Core\\Is"},{"kind":32,"name":"__construct","location":{"uriHash":2073270805,"range":{"start":{"line":23,"character":4},"end":{"line":26,"character":5}}},"modifiers":1,"type":"","children":[{"kind":128,"name":"$matcher","location":{"uriHash":2073270805,"range":{"start":{"line":23,"character":32},"end":{"line":23,"character":48}}},"type":"Hamcrest\\Matcher","scope":"__construct"}],"scope":"Hamcrest\\Core\\Is"},{"kind":32,"name":"matches","location":{"uriHash":2073270805,"range":{"start":{"line":28,"character":4},"end":{"line":31,"character":5}}},"modifiers":1,"type":"","children":[{"kind":128,"name":"$arg","location":{"uriHash":2073270805,"range":{"start":{"line":28,"character":28},"end":{"line":28,"character":32}}},"scope":"matches"}],"scope":"Hamcrest\\Core\\Is"},{"kind":32,"name":"describeTo","location":{"uriHash":2073270805,"range":{"start":{"line":33,"character":4},"end":{"line":36,"character":5}}},"modifiers":1,"type":"","children":[{"kind":128,"name":"$description","location":{"uriHash":2073270805,"range":{"start":{"line":33,"character":31},"end":{"line":33,"character":55}}},"type":"Hamcrest\\Description","scope":"describeTo"}],"scope":"Hamcrest\\Core\\Is"},{"kind":32,"name":"describeMismatch","location":{"uriHash":2073270805,"range":{"start":{"line":38,"character":4},"end":{"line":41,"character":5}}},"modifiers":1,"type":"","children":[{"kind":128,"name":"$item","location":{"uriHash":2073270805,"range":{"start":{"line":38,"character":37},"end":{"line":38,"character":42}}},"scope":"describeMismatch"},{"kind":128,"name":"$mismatchDescription","location":{"uriHash":2073270805,"range":{"start":{"line":38,"character":44},"end":{"line":38,"character":76}}},"type":"Hamcrest\\Description","scope":"describeMismatch"}],"scope":"Hamcrest\\Core\\Is"},{"kind":32,"name":"is","location":{"uriHash":2073270805,"range":{"start":{"line":52,"character":4},"end":{"line":55,"character":5}}},"doc":{"description":"Decorates another Matcher, retaining the behavior but allowing tests\nto be slightly more expressive.\n\nFor example:  assertThat($cheese, equalTo($smelly))\nvs.  assertThat($cheese, is(equalTo($smelly)))","type":""},"modifiers":33,"type":"","children":[{"kind":128,"name":"$value","location":{"uriHash":2073270805,"range":{"start":{"line":52,"character":30},"end":{"line":52,"character":36}}},"scope":"is"}],"scope":"Hamcrest\\Core\\Is"}],"associated":[{"kind":1,"name":"Hamcrest\\BaseMatcher"}],"doc":{"description":"Decorates another Matcher, retaining the behavior but allowing tests\nto be slightly more expressive.\n\nFor example:  assertThat($cheese, equalTo($smelly))\nvs.  assertThat($cheese, is(equalTo($smelly)))","type":""},"modifiers":0}]},"_hash":2073270805}]]